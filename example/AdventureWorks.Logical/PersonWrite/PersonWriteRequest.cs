using AdventureWorks.Logical.Updates;
using System;

namespace AdventureWorks.Logical.PersonWrite
{
    /// <summary>
    /// Ability to update a set of person records
    /// <code>
    /// update person
    /// set p.FirstName = @firstName,
    /// p.LastName = @lastName
    /// where p.id = @id
    /// </code>
    /// <code>
    /// var firstName = "bill";
    /// var lastName = "brasky";
    /// var id = 12345;
    /// new PersonWriteRequest
    /// {
    ///     Set = new []
    ///     {
    ///         new PersonWrite
    ///         {
    ///             Id = id,
    ///             FirstName = new StringUpdate(firstName),
    ///             LastName = new StringUpdate(lastName)
    ///         }
    ///     }
    /// };
    /// </code>
    /// </summary>
    public class PersonWriteRequest
    {
        public PersonInput[] Set { get; set; }

        public PersonWriteRequest() { }
        public PersonWriteRequest(params PersonInput[] people) => Set = people;
    }

    public class PersonInput
    {
        /// <summary>
        /// If ID is null, this is a new record. Otherwise this is an update
        /// </summary>
        public Guid? Id { get; set; }

        public StringUpdate Title { get; set; }
        public StringUpdate FirstName { get; set; }
        public StringUpdate LastName { get; set; }
        public StringUpdate Suffix { get; set; }
        public EmailUpdate EmailAddresses { get; set; }
        public PhoneUpdate PhoneNumbers { get; set; }
        public StringUpdate AdditionalContactInfo { get; set; }
        public DateTimeOffsetUpdate ModifiedDate { get; set; }
    }

    public class PhoneUpdate
    {
        public PhoneUpdateAdd Add { get; set; }
        public PhoneUpdateRemove Remove { get; set; }
        public PhoneUpdateModify Modify { get; set; }

    }

    /// <summary>
    /// This class could be removed if the ID parameter is not null
    /// </summary>
    public class PhoneUpdateAdd
    {
        /// <summary>
        /// If an existing phone number needs to be linked. Null if autogenerated
        /// </summary>
        public Guid? Id { get; set; }
        public int CountryCode { get; set; }
        public int AreaCode { get; set; }
        public int CentralOffice { get; set; }
        public int LineNumber { get; set; }
        public PhoneType PhoneType { get; set; }
    }

    public class PhoneUpdateRemove
    {
        public int Id { get; set; }
    }

    public class PhoneUpdateModify
    {
        public Guid Id { get; set; }
        public IntUpdate CountryCode { get; set; }
        public IntUpdate AreaCode { get; set; }
        public IntUpdate CentralOffice { get; set; }
        public IntUpdate LineNumber { get; set; }
        public PhoneTypeUpdate PhoneTypeUpdate { get; set; }
    }

    public class PhoneTypeUpdate
    {
        /// <summary>
        /// Change this to re-link by ID
        /// </summary>
        public GuidUpdate Id { get; set; }

        /// <summary>
        /// Change this to re-link by Name
        /// </summary>
        public StringUpdate Name { get; set; }
    }

    public class EmailUpdate
    {
        public EmailUpdateAdd[] Add { get; set; }
        public EmailUpdateRemove[] Remove {get;set;}
        public EmailUpdateModify[] Modify {get;set;}
    }

    public class EmailUpdateAdd
    {
        /// <summary>
        /// If an existing phone number needs to be linked. Null if autogenerated
        /// </summary>
        public Guid? Id { get; set; }
        public string Value { get; set; }
    }

    public class EmailUpdateRemove
    {
        public int Id { get; set; }
    }

    public class EmailUpdateModify 
    {
        public int Id { get; set; }
        public StringUpdate Value { get; set; }
    }
}